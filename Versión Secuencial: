#include <iostream>
#include <opencv2/opencv.hpp>
#include <chrono>

int main() {
    // Cargar la imagen a color
    cv::Mat img = cv::imread("/home/manuel/Documentos/playa-tropical-del-paraÃ­so-con-la-palmera-41402415.jpg");
    if (img.empty()) {
        std::cout << "Error al cargar la imagen" << std::endl;
        return -1;
    }

    // Crear una imagen en escala de grises del mismo tamaÃ±o que la imagen original
    cv::Mat img_gray(img.rows, img.cols, CV_8UC1);

    // Medir el tiempo de inicio
    auto start_time = std::chrono::high_resolution_clock::now();

    // Convertir la imagen a escala de grises (mÃ©todo de luminosidad)
    for (int i = 0; i < img.rows; ++i) {
        for (int j = 0; j < img.cols; ++j) {
            cv::Vec3b pixel = img.at<cv::Vec3b>(i, j);
            int gray_value = 0.2126 * pixel[2] + 0.7152 * pixel[1] + 0.0722 * pixel[0];
            img_gray.at<uchar>(i, j) = gray_value;
        }
    }

    // Medir el tiempo de finalizaciÃ³n y calcular la duraciÃ³n
    auto end_time = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double> elapsed = end_time - start_time;

    // Guardar la imagen en escala de grises
    cv::imwrite("/home/manuel/Documentos/imagen_gris_secuencial.jpg", img_gray);
    std::cout << "Imagen en escala de grises secuencial guardada correctamente" << std::endl;

    // Mostrar el tiempo de ejecuciÃ³n
    std::cout << "Tiempo de ejecuciÃ³n: " << elapsed.count() << " segundos" << std::endl;

    return 0;
}
